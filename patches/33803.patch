diff --git App/DeploymentConfig.php App/DeploymentConfig.php
index 538e6535495..c1c436949e9 100644
--- /App/DeploymentConfig.php
+++ /App/DeploymentConfig.php
@@ -35,14 +35,14 @@ class DeploymentConfig
      *
      * @var array
      */
-    private $data;
+    private $data = [];
 
     /**
      * Flattened data
      *
      * @var array
      */
-    private $flatData;
+    private $flatData = [];
 
     /**
      * Injected configuration data
@@ -76,58 +76,57 @@ class DeploymentConfig
      */
     public function get($key = null, $defaultValue = null)
     {
-        $this->load();
         if ($key === null) {
+            if (empty($this->flatData)) {
+                $this->reloadData();
+            }
             return $this->flatData;
         }
 
-        if (array_key_exists($key, $this->flatData) && $this->flatData[$key] === null) {
-            return '';
+        $result = $this->getByKey($key);
+        if ($result === null) {
+            $this->reloadData();
+            $result = $this->getByKey($key);
         }
 
-        return $this->flatData[$key] ?? $defaultValue;
-    }
-
-    /**
-     * Checks if data available
-     *
-     * @return bool
-     * @throws FileSystemException
-     * @throws RuntimeException
-     */
-    public function isAvailable()
-    {
-        $this->load();
-        return isset($this->flatData[ConfigOptionsListConstants::CONFIG_PATH_INSTALL_DATE]);
+        return $result ?? $defaultValue;
     }
 
     /**
      * Gets a value specified key from config data
      *
-     * @param string $key
+     * @param string|null $key
      * @return null|mixed
      * @throws FileSystemException
      * @throws RuntimeException
      */
     public function getConfigData($key = null)
     {
-        $this->load();
-
-        if ($key !== null && !isset($this->data[$key])) {
-            return null;
+        if ($key === null) {
+            if (empty($this->data)) {
+                $this->reloadData();
+            }
+            return $this->data;
         }
 
-        return $this->data[$key] ?? $this->data;
+        $result = $this->getConfigDataByKey($key);
+        if ($result === null) {
+            $this->reloadData();
+            $result = $this->getConfigDataByKey($key);
+        }
+        return $result;
     }
 
     /**
-     * Resets config data
+     * Checks if data available
      *
-     * @return void
+     * @return bool
+     * @throws FileSystemException
+     * @throws RuntimeException
      */
-    public function resetData()
+    public function isAvailable()
     {
-        $this->data = null;
+        return $this->get(ConfigOptionsListConstants::CONFIG_PATH_INSTALL_DATE) !== null;
     }
 
     /**
@@ -140,8 +139,18 @@ class DeploymentConfig
      */
     public function isDbAvailable()
     {
-        $this->load();
-        return isset($this->data['db']);
+        return $this->getConfigData('db') !== null;
+    }
+
+    /**
+     * Resets config data
+     *
+     * @return void
+     */
+    public function resetData()
+    {
+        $this->data = [];
+        $this->flatData = [];
     }
 
     /**
@@ -164,30 +173,27 @@ class DeploymentConfig
      * @throws FileSystemException
      * @throws RuntimeException
      */
-    private function load()
+    private function reloadData(): void
     {
-        if (empty($this->data)) {
-            $this->data = array_replace(
-                $this->reader->load(),
-                $this->overrideData ?? [],
-                $this->getEnvOverride()
-            );
-            // flatten data for config retrieval using get()
-            $this->flatData = $this->flattenParams($this->data);
-
-            // allow reading values from env variables by convention
-            // MAGENTO_DC_{path}, like db/connection/default/host =>
-            // can be overwritten by MAGENTO_DC_DB__CONNECTION__DEFAULT__HOST
-            foreach (getenv() as $key => $value) {
-                if (false !== \strpos($key, self::MAGENTO_ENV_PREFIX)
-                    && $key !== self::OVERRIDE_KEY
-                ) {
-                    // convert MAGENTO_DC_DB__CONNECTION__DEFAULT__HOST into db/connection/default/host
-                    $flatKey = strtolower(str_replace([self::MAGENTO_ENV_PREFIX, '__'], ['', '/'], $key));
-                    $this->flatData[$flatKey] = $value;
-                }
-            }
+        $this->data = $this->reader->load();
+        if ($this->overrideData) {
+            $this->data = array_replace($this->data, $this->overrideData);
         }
+        // flatten data for config retrieval using get()
+        $this->flatData = $this->flattenParams($this->data);
+
+        // allow reading values from env variables by convention
+        // MAGENTO_DC_{path}, like db/connection/default/host =>
+        // can be overwritten by MAGENTO_DC_DB__CONNECTION__DEFAULT__HOST
+        foreach (getenv() as $key => $value) {
+            if (false !== \strpos($key, self::MAGENTO_ENV_PREFIX)
+                && $key !== self::OVERRIDE_KEY
+            ) {
+                // convert MAGENTO_DC_DB__CONNECTION__DEFAULT__HOST into db/connection/default/host
+                $flatKey = strtolower(str_replace([self::MAGENTO_ENV_PREFIX, '__'], ['', '/'], $key));
+                $this->flatData[$flatKey] = $value;
+            }
+        }        
     }
 
     /**
@@ -197,12 +203,12 @@ class DeploymentConfig
      * each level of array is accessible by path key
      *
      * @param array $params
-     * @param string $path
-     * @param array $flattenResult
+     * @param string|null $path
+     * @param array|null $flattenResult
      * @return array
      * @throws RuntimeException
      */
-    private function flattenParams(array $params, $path = null, array &$flattenResult = null) : array
+    private function flattenParams(array $params, ?string $path = null, array &$flattenResult = null): array
     {
         if (null === $flattenResult) {
             $flattenResult = [];
@@ -236,4 +242,26 @@ class DeploymentConfig
 
         return $flattenResult;
     }
+
+    /**
+     * @param string|null $key
+     * @return mixed|null
+     */
+    private function getByKey(?string $key)
+    {
+        if (array_key_exists($key, $this->flatData) && $this->flatData[$key] === null) {
+            return '';
+        }
+
+        return $this->flatData[$key] ?? null;
+    }
+
+    /**
+     * @param string|null $key
+     * @return mixed|null
+     */
+    private function getConfigDataByKey(?string $key)
+    {
+        return $this->data[$key] ?? null;
+    }
 }
diff --git App/Test/Unit/DeploymentConfigTest.php App/Test/Unit/DeploymentConfigTest.php
index 191a86c442f..4976e2188d6 100644
--- /App/Test/Unit/DeploymentConfigTest.php
+++ /App/Test/Unit/DeploymentConfigTest.php
@@ -1,8 +1,10 @@
 <?php
+
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
+
 declare(strict_types=1);
 
 namespace Magento\Framework\App\Test\Unit;
@@ -12,6 +14,8 @@ use Magento\Framework\App\DeploymentConfig\Reader;
 use Magento\Framework\Config\ConfigOptionsListConstants;
 use PHPUnit\Framework\MockObject\MockObject;
 use PHPUnit\Framework\TestCase;
+use Magento\Framework\Exception\FileSystemException;
+use Magento\Framework\Exception\RuntimeException;
 
 class DeploymentConfigTest extends TestCase
 {
@@ -19,32 +23,32 @@ class DeploymentConfigTest extends TestCase
      * @var array
      */
     private static $fixture
-        = [
-            'configData1'   => 'scalar_value',
-            'configData2'   => [
-                'foo' => 1,
-                'bar' => ['baz' => 2],
-            ],
-            'configData3'   => null,
-            'test_override' => 'original',
-        ];
+    = [
+        'configData1' => 'scalar_value',
+        'configData2' => [
+            'foo' => 1,
+            'bar' => ['baz' => 2],
+        ],
+        'configData3' => null,
+        'test_override' => 'original',
+    ];
 
     /**
      * @var array
      */
     private static $flattenedFixture
-        = [
-            'configData1'         => 'scalar_value',
-            'configData2'         => [
-                'foo' => 1,
-                'bar' => ['baz' => 2],
-            ],
-            'configData2/foo'     => 1,
-            'configData2/bar'     => ['baz' => 2],
-            'configData2/bar/baz' => 2,
-            'configData3'         => null,
-            'test_override'       => 'overridden',
-        ];
+    = [
+        'configData1' => 'scalar_value',
+        'configData2' => [
+            'foo' => 1,
+            'bar' => ['baz' => 2],
+        ],
+        'configData2/foo' => 1,
+        'configData2/bar' => ['baz' => 2],
+        'configData2/bar/baz' => 2,
+        'configData3' => null,
+        'test_override' => 'overridden',
+    ];
 
     /**
      * @var array
@@ -59,17 +63,17 @@ class DeploymentConfigTest extends TestCase
     /**
      * @var DeploymentConfig
      */
-    protected $_deploymentConfig;
+    protected $deploymentConfig;
 
     /**
      * @var DeploymentConfig
      */
-    protected $_deploymentConfigMerged;
+    protected $deploymentConfigMerged;
 
     /**
      * @var MockObject
      */
-    private $reader;
+    private $readerMock;
 
     public static function setUpBeforeClass(): void
     {
@@ -79,71 +83,85 @@ class DeploymentConfigTest extends TestCase
 
     protected function setUp(): void
     {
-        $this->reader                  = $this->createMock(Reader::class);
-        $this->_deploymentConfig       = new DeploymentConfig(
-            $this->reader,
+        $this->readerMock = $this->createMock(Reader::class);
+        $this->deploymentConfig = new DeploymentConfig(
+            $this->readerMock,
             ['test_override' => 'overridden']
         );
-        $this->_deploymentConfigMerged = new DeploymentConfig(
-            $this->reader,
+        $this->deploymentConfigMerged = new DeploymentConfig(
+            $this->readerMock,
             require __DIR__ . '/_files/other/local_developer.php'
         );
     }
 
+    /**
+     * @return void
+     * @throws FileSystemException
+     * @throws RuntimeException
+     */
     public function testGetters(): void
     {
-        $this->reader->expects($this->once())->method('load')->willReturn(self::$fixture);
-        $this->assertSame(self::$flattenedFixture, $this->_deploymentConfig->get());
-        // second time to ensure loader will be invoked only once
-        $this->assertSame(self::$flattenedFixture, $this->_deploymentConfig->get());
-        $this->assertSame('scalar_value', $this->_deploymentConfig->getConfigData('configData1'));
-        $this->assertSame(self::$fixture['configData2'], $this->_deploymentConfig->getConfigData('configData2'));
-        $this->assertSame(self::$fixture['configData3'], $this->_deploymentConfig->getConfigData('configData3'));
-        $this->assertSame('', $this->_deploymentConfig->get('configData3'));
-        $this->assertSame('defaultValue', $this->_deploymentConfig->get('invalid_key', 'defaultValue'));
-        $this->assertNull($this->_deploymentConfig->getConfigData('invalid_key'));
-        $this->assertSame('overridden', $this->_deploymentConfig->get('test_override'));
+        $this->readerMock->expects($this->any())->method('load')->willReturn(self::$fixture);
+        $this->assertSame(self::$flattenedFixture, $this->deploymentConfig->get());
+        $this->assertSame('scalar_value', $this->deploymentConfig->getConfigData('configData1'));
+        $this->assertSame(self::$fixture['configData2'], $this->deploymentConfig->getConfigData('configData2'));
+        $this->assertSame(self::$fixture['configData3'], $this->deploymentConfig->getConfigData('configData3'));
+        $this->assertSame('', $this->deploymentConfig->get('configData3'));
+        $this->assertSame('defaultValue', $this->deploymentConfig->get('invalid_key', 'defaultValue'));
+        $this->assertNull($this->deploymentConfig->getConfigData('invalid_key'));
+        $this->assertSame('overridden', $this->deploymentConfig->get('test_override'));
     }
 
     public function testIsAvailable(): void
     {
-        $this->reader->expects($this->once())->method('load')->willReturn(
+        $this->readerMock->expects($this->once())->method('load')->willReturn(
             [
                 ConfigOptionsListConstants::CONFIG_PATH_INSTALL_DATE => 1,
             ]
         );
-        $object = new DeploymentConfig($this->reader);
+        $object = new DeploymentConfig($this->readerMock);
         $this->assertTrue($object->isAvailable());
     }
 
+    /**
+     * @return void
+     * @throws FileSystemException
+     * @throws RuntimeException
+     */
     public function testNotAvailable(): void
     {
-        $this->reader->expects($this->once())->method('load')->willReturn([]);
-        $object = new DeploymentConfig($this->reader);
+        $this->readerMock->expects($this->once())->method('load')->willReturn([]);
+        $object = new DeploymentConfig($this->readerMock);
         $this->assertFalse($object->isAvailable());
     }
 
     /**
      * test if the configuration changes during the same request, the configuration remain the same
+     *
+     * @return void
+     * @throws FileSystemException
+     * @throws RuntimeException
      */
     public function testNotAvailableThenAvailable(): void
     {
-        $this->reader->expects($this->once())->method('load')->willReturn(['Test']);
-        $object = new DeploymentConfig($this->reader);
+        $this->readerMock->expects($this->once())->method('load')->willReturn(['Test']);
+        $object = new DeploymentConfig($this->readerMock);
         $this->assertFalse($object->isAvailable());
         $this->assertFalse($object->isAvailable());
     }
 
     /**
-     * @param array $data
      * @dataProvider keyCollisionDataProvider
+     * @param array $data
+     * @throws FileSystemException
+     * @throws RuntimeException
      */
     public function testKeyCollision(array $data): void
     {
         $this->expectException('Exception');
         $this->expectExceptionMessage('Key collision');
-        $this->reader->expects($this->once())->method('load')->willReturn($data);
-        $object = new DeploymentConfig($this->reader);
+        $this->readerMock->expects($this->once())->method('load')->willReturn($data);
+        $object = new DeploymentConfig($this->readerMock);
         $object->get();
     }
 
@@ -171,61 +189,83 @@ class DeploymentConfigTest extends TestCase
         ];
     }
 
+    /**
+     * @return void
+     * @throws FileSystemException
+     * @throws RuntimeException
+     */
     public function testResetData(): void
     {
-        $this->reader->expects($this->exactly(2))->method('load')->willReturn(self::$fixture);
-        $this->assertSame(self::$flattenedFixture, $this->_deploymentConfig->get());
-        $this->_deploymentConfig->resetData();
+        $this->readerMock->expects($this->exactly(2))->method('load')->willReturn(self::$fixture);
+        $this->assertSame(self::$flattenedFixture, $this->deploymentConfig->get());
+        $this->deploymentConfig->resetData();
         // second time to ensure loader will be invoked only once after reset
-        $this->assertSame(self::$flattenedFixture, $this->_deploymentConfig->get());
-        $this->assertSame(self::$flattenedFixture, $this->_deploymentConfig->get());
+        $this->assertSame(self::$flattenedFixture, $this->deploymentConfig->get());
+        $this->assertSame(self::$flattenedFixture, $this->deploymentConfig->get());
     }
 
+    /**
+     * @return void
+     * @throws FileSystemException
+     * @throws RuntimeException
+     */
     public function testIsDbAvailable(): void
     {
-        $this->reader->expects($this->exactly(2))->method('load')->willReturnOnConsecutiveCalls([], ['db' => []]);
-        $this->assertFalse($this->_deploymentConfig->isDbAvailable());
-        $this->_deploymentConfig->resetData();
-        $this->assertTrue($this->_deploymentConfig->isDbAvailable());
+        $this->readerMock->expects($this->exactly(2))->method('load')->willReturnOnConsecutiveCalls([], ['db' => []]);
+        $this->assertFalse($this->deploymentConfig->isDbAvailable());
+        $this->assertTrue($this->deploymentConfig->isDbAvailable());
+    }
+
+    /**
+     * @return void
+     * @throws FileSystemException
+     * @throws RuntimeException
+     */
+    public function testResetDataOnMissingConfig(): void
+    {
+        $this->readerMock->expects($this->once())->method('load')->willReturn(self::$fixture);
+        $defaultValue = 'some_default_value';
+        $result = $this->deploymentConfig->get('missing/key', $defaultValue);
+        $this->assertEquals($defaultValue, $result);
     }
 
     public function testNoEnvVariables()
     {
-        $this->reader->expects($this->once())->method('load')->willReturn(['a'=>'b']);
-        $this->assertSame('b', $this->_deploymentConfig->get('a'));
+        $this->readerMock->expects($this->once())->method('load')->willReturn(['a' => 'b']);
+        $this->assertSame('b', $this->deploymentConfig->get('a'));
     }
 
     public function testEnvVariables()
     {
-        $this->reader->expects($this->once())->method('load')->willReturn([]);
+        $this->readerMock->expects($this->once())->method('load')->willReturn([]);
         putenv('MAGENTO_DC__OVERRIDE={"a": "c"}');
-        $this->assertSame('c', $this->_deploymentConfig->get('a'));
+        $this->assertSame('c', $this->deploymentConfig->get('a'));
     }
 
     public function testEnvVariablesWithNoBaseConfig()
     {
-        $this->reader->expects($this->once())->method('load')->willReturn(['a'=>'b']);
+        $this->readerMock->expects($this->once())->method('load')->willReturn(['a' => 'b']);
         putenv('MAGENTO_DC_A=c');
         putenv('MAGENTO_DC_B__B__B=D');
-        $this->assertSame('c', $this->_deploymentConfig->get('a'));
-        $this->assertSame('D', $this->_deploymentConfig->get('b/b/b'));
+        $this->assertSame('c', $this->deploymentConfig->get('a'));
+        $this->assertSame('D', $this->deploymentConfig->get('b/b/b'));
     }
 
     public function testEnvVariablesSubstitution()
     {
-        $this->reader->expects($this->once())
+        $this->readerMock->expects($this->once())
             ->method('load')
             ->willReturn(
                 [
-                    'a'=>'#env(MAGENTO_DC____A)',
-                    'b'=>'#env(MAGENTO_DC____B, "test")',
-                    'c'=>'#env(MAGENTO_DC____D, "e$%^&")'
+                    'a' => '#env(MAGENTO_DC____A)',
+                    'b' => '#env(MAGENTO_DC____B, "test")',
+                    'c' => '#env(MAGENTO_DC____D, "e$%^&")'
                 ]
             );
         putenv('MAGENTO_DC____A=c');
         putenv('MAGENTO_DC____B=D');
-        $this->assertSame('c', $this->_deploymentConfig->get('a'));
-        $this->assertSame('D', $this->_deploymentConfig->get('b'), 'return value from env');
-        $this->assertSame('e$%^&', $this->_deploymentConfig->get('c'), 'return default value');
+        $this->assertSame('c', $this->deploymentConfig->get('a'));
+        $this->assertSame('D', $this->deploymentConfig->get('b'), 'return value from env');
+        $this->assertSame('e$%^&', $this->deploymentConfig->get('c'), 'return default value');
     }
 }
